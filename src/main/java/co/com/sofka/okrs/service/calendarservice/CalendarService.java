package co.com.sofka.okrs.service.calendarservice;

import co.com.sofka.okrs.domain.calendarDomain.EventCalendar;
import co.com.sofka.okrs.util.calendar.CalendarUtil;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.javanet.NetHttpTransport;
import com.google.api.client.util.DateTime;
import com.google.api.services.calendar.Calendar;
import com.google.api.services.calendar.model.*;
import org.springframework.stereotype.Service;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

@Service
public class CalendarService {

    public Flux<Event> load() throws GeneralSecurityException, IOException {
        Flux<Event> eventFlux = Flux.fromIterable(
                calendarEvents( new DateTime(System.currentTimeMillis())).getItems()
        ).flatMap(event -> {
                    if(event.isEmpty()) {
                        return Flux.empty();
                    }else {
                        return Mono.just(event);
                    }
                }
        );

        return  eventFlux;
    }

    public Flux<Event> loadFilter(String email) throws GeneralSecurityException, IOException {
        Calendar calendarService = calendarService();
        List<Event> list = calendarService.events().list("primary").execute().getItems();
        Flux<Event> eventFlux = Flux.fromIterable(list).map(event -> {
            Boolean band = false;
            List<EventAttendee> list2 = event.getAttendees();
            for (EventAttendee eventAttendee: list2){
                if(eventAttendee.getEmail().equals(email)){
                    band = true;
                }
            }
            if (band){return event;}
            else {return new Event();}
        }).filter(event -> !event.isEmpty());

        return eventFlux;
    }

    public Mono<Void> delete(String id) throws GeneralSecurityException, IOException {
        System.out.println(id);
        Calendar calendarService = calendarService();
        calendarService.events().delete("primary",id).setSendNotifications(true).execute();
        return Mono.empty();
    }

    public Mono<Event> save(EventCalendar eventC) throws IOException, GeneralSecurityException {
        Mono<EventCalendar> eventCalendar = Mono.just(eventC);
        Calendar service = calendarService();
        Event event = new Event();

        List<EventAttendee> attendees1 = new ArrayList<>();

        Event finalEvent = event;
        eventCalendar.subscribe(evento1 -> {
            finalEvent.setSummary(evento1.getTitle());
            finalEvent.setLocation(evento1.getLocation());
            finalEvent.setDescription(evento1.getDescription());
            finalEvent.setStart(new EventDateTime()
                    .setDateTime(new DateTime(evento1.buildDateStart()))
                    .setTimeZone("GMT-05:00"));//Zona horaria en Colombia

            finalEvent.setEnd(new EventDateTime()
                    .setDateTime(new DateTime(evento1.buildDateEnd()))
                    .setTimeZone("GMT-05:00"));//Zona horaria en Colombia

            evento1.getEmails().forEach(email -> attendees1.add(new EventAttendee().setEmail(email)));
            finalEvent.setAttendees(attendees1);

        });

        finalEvent.setReminders(new Event.Reminders()
                .setUseDefault(false)
                .setOverrides(Arrays.asList(new EventReminder().setMethod("email").setMinutes(24 * 60),
                        new EventReminder().setMethod("popup").setMinutes(10))));

        event.setConferenceData(getConferenceData()); // attach the meeting to your event
        String calendarId = "primary";
        event = service.events().insert(calendarId, finalEvent).setSendNotifications(true).setConferenceDataVersion(1).execute();
        //System.out.printf("Event created: %s\n", event.getHtmlLink());

        return Mono.just(event).onErrorResume(e-> Mono.error(new IllegalArgumentException("recticar la informacion")));
    }

    private ConferenceData getConferenceData() {
        ConferenceSolutionKey conferenceSKey = new ConferenceSolutionKey();
        conferenceSKey.setType("hangoutsMeet"); // Non-G suite user
        CreateConferenceRequest createConferenceReq = new CreateConferenceRequest();
        createConferenceReq.setRequestId("ssgsjnabug"); // ID generated by you
        createConferenceReq.setConferenceSolutionKey(conferenceSKey);
        ConferenceData conferenceData = new ConferenceData();
        conferenceData.setCreateRequest(createConferenceReq);
        return conferenceData;
    }


    private Calendar calendarService() throws GeneralSecurityException, IOException {
        // Build a new authorized API client service.
        final NetHttpTransport HTTP_TRANSPORT = GoogleNetHttpTransport.newTrustedTransport();
        Calendar calendarService = new Calendar.Builder(HTTP_TRANSPORT, CalendarUtil.JSON_FACTORY, CalendarUtil.getCredentials(HTTP_TRANSPORT))
                .setApplicationName(CalendarUtil.APPLICATION_NAME)
                .build();
        return calendarService;
    }

    private Events calendarEvents(DateTime dateTime) throws GeneralSecurityException, IOException {
        Calendar calendarService = calendarService();
        // List the next 10 events from the primary calendar.
        Events events = calendarService.events().list("primary")
                .setMaxResults(10)
                .setTimeMin(dateTime)
                .setOrderBy("startTime")
                .setSingleEvents(true)
                .execute();

        return events;

    }
}
